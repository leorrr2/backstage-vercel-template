# platform-team-and-template.yaml

apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: platform-team
  namespace: default
  description: Platform Team
spec:
  type: team
  profile:
    displayName: Platform Team
  children: []
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: repo-to-vercel-template
  namespace: default
  title: Any repo to GitHub
  description: Copies any Git repo, creates a new GitHub repo, and pushes the code
spec:
  owner: group:default/platform-team
  type: service

  parameters:
    - title: Source repository
      required: [sourceRepoUrl]
      properties:
        sourceRepoUrl:
          title: Git URL of source
          type: string
          description: Example https://github.com/org/example-repo.git
        sourceRef:
          title: Git ref or branch
          type: string
          description: Optional. Example main or v1.2.3
    - title: Destination repository
      required: [repoOwner, repoName]
      properties:
        repoOwner:
          title: GitHub org or user
          type: string
        repoName:
          title: Repository name
          type: string
        defaultBranch:
          title: Default branch
          type: string
          default: main
        visibility:
          title: Visibility
          type: string
          enum: [private, public, internal]
          default: private

  steps:
    - id: fetch-source
      name: Fetch source
      action: fetch:plain
      input:
        url: ${{ parameters.sourceRepoUrl }}
        targetPath: .
        checkout: ${{ parameters.sourceRef }}

    - id: create-repo
      name: Create GitHub repo
      action: github:repo:create
      input:
        repoUrl: github.com?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
        description: Scaffolded by Backstage
        defaultBranch: ${{ parameters.defaultBranch }}
        protectDefaultBranch: true
        repoVisibility: ${{ parameters.visibility }}

    - id: publish
      name: Push to GitHub
      action: publish:github
      input:
        repoUrl: github.com?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
        commitMessage: "chore(scaffold): import from ${{ parameters.sourceRepoUrl }}"

  output:
    links:
      - title: Source repository
        url: ${{ steps.publish.output.remoteUrl }}
